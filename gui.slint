import { Button, ComboBox, VerticalBox, LineEdit, HorizontalBox, ListView } from "std-widgets.slint";

export global Global {
    callback startServer();
    callback stopServer();
    callback playAudio(string);
    callback stopAudio(string);
}

struct Mic {
    name: string,
    playing: bool,
}

export component MainWindow inherits Window {
    width: 400px;
    height: 400px;
    title: "Virtual Audio Streamer";
    background: #f0f0f0;

    out property <bool> is-server-running: false;
    in-out property <bool> is-audio-playing: false;
    in-out property <bool> is-client-connected: false;
    in property <string> localIp;
    in property <[Mic]> mics: [];

    VerticalBox {
        padding: 20px;
        spacing: 10px;

        Text {
            text: "Virtual Audio Streamer";
            font-size: 24px;
            horizontal-alignment: center;
        }

        HorizontalBox {
            Button {
                text: root.is-server-running ? "Stop Server" : "Start Server";
                primary: !root.is-server-running;
                clicked => {
                    if (!root.is-server-running) {
                        Global.startServer();
                        root.is-server-running = true;
                    } else {
                        Global.stopServer();
                        root.is-server-running = false;
                        root.is-client-connected = false;
                        root.is-audio-playing = false;
                    }
                }
            }

            Text {
                text: root.is-server-running ? "Server Running at " + root.localIp : "";
                vertical-alignment: center;
            }
        }

        if (root.is-server-running && root.mics.length == 0): Text {
            text: "Waiting for client to connect...";
            font-size: 16px;
            horizontal-alignment: center;
        }

        ListView {
            for mic in mics: HorizontalBox {
                Text {
                    text: mic.name;
                }

                Button {
                    text: mic.playing ? "Stop" : "Play";
                    clicked => {
                        if mic.playing {
                            Global.stopAudio(mic.name);
                            mic.playing = false;
                        } else {
                            Global.playAudio(mic.name);
                            mic.playing = true;
                        }
                    }
                }
            }
        }
    }
}
